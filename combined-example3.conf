input {
  udp {
    port => 1234
    codec => plain {
    charset => "ISO-8859-1"
    }
    type=>nginxaccess
  }
  udp {
    port => 56788
    codec => plain {
    charset => "ISO-8859-1"
    }
    type=>adobelog
  }
  #log de prueba
  file{
    codec => plain {charset => "ISO-8859-1"}
    path => "adobelog.log"
      start_position => "beginning"
      type=> adobelog
  }
  #log de prueba
  file{
    path => "rtmp.log"
      start_position => "beginning"
      type=> rtmplog
  }
  http {
    port => 1212
    codec => json
    type => "rtmplivestats"
  }
  http {
    port => 1213
   codec => json
   type => "rtmpdataclients"
  }
}

filter {
  if [type] == "rtmplog" {
    grok {
      match => { "message" => "%{RTMPLOG}" }
    }
    mutate{
      convert => { 
        "bytesreceived" => "integer"
        "bytessent" => "integer"
      }
    }
  }
  if [type] == "nginxaccess"{
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
  }
  if [type] == "adobelog"{
    grok {
      match => { "message" => "%{ADOBELOG}" }
    }
    mutate{
      convert => { 
        "eventduration" => "integer"
        "spid" => "integer"
        "cpuload" => "integer"
        "scBytes" => "integer"
      }
    }
    mutate{
      add_field =>{"timestamp" => "%{year}-%{month}-%{day} %{time}"}
    }
  }
  if [type] == "rtmplivestats"{
    mutate{
      remove_field => ["headers"]
      convert => { 
        "timeonline" => "integer"
        "nclients" => "integer"
        "anchoBanda[Mbs]"=>"float"
      }
    }
  }
  if [type] == "rtmpdataclients"{
    mutate{
      remove_field => ["headers"]
      convert => { 
        "timeonline" => "integer"
      }
    }
    grok {
      match => { "timeonlinebeta" => "%{TIMEONLINE}" }
    }
    date{
      match => ["timeonlinebeta","HH:mm:ss"]
      target => "timeonlinebeta"
    }
  }
  geoip {
      source => "ipclient"
      database =>"C:/Users/m.francia/Desktop/ELK/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  date{
      match => ["timestamp", "YYYY-MM-dd HH:mm:ss","dd/MMM/yyyy:HH:mm:ss Z"]
      timezone => "Europe/Madrid"
      target => "@timestamp"
    }
}
output {
  elasticsearch {
    hosts => [""]
  }
  stdout { codec => rubydebug }
}